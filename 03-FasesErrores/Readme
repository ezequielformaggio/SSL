Paso 1) hello2.c

#include <stdio.h>

int/*medio*/main(void){
    int i = 42;
    prontf("la respuesta es %d\n");
}

Error: En este caso, el compilador no nos indica la presencia de un error sino que nos da
una se√±al de advertencia, ya que no esta declarada la funcion prontf, en su lugar nos 
sugiere usar printf (ya que supone que existe un error de tipeo).

warning: implicit declaration of function 'prontf'; did you mean 'printf'? 

Paso 2) Preprocesar hello2.c, no compilar, y generar hello2.i. Analizar su contenido.

Se crean 896 lineas de codigo entre las cuales hay llamadas a funciones y direcciones de archivos.
Desaparecen los comentarios.

Paso 3) hello3.c

int printf(const char *s, ...);

int main(void){
int i=42;
pront("La respuesta es %d\n");

Paso 4) Investigar la semantica de la primera linea

##############################################################################

Paso 5) Preprocesar hello3.c, no compilar, y generar hello3.i. Buscar diferencias
entre hello3.c y hello3.i.

La diferencia entre ambos codigos, es que en hello3.i, aparecen nuevas lineas de codigo:

# 1 "hello3.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "hello3.c"

Paso 6) Compilar el resultado y generar hello3.s, no ensamblar.

Paso 7) Corregir en el nuevo archivo hello4.c y empezar de nuevo, generar hello4.s, no ensamblar.

Paso 8) Investigar hello4.s.

Paso 9) Ensamblar hello4.s en hello4.o, no vincular

Paso 10) Vincular hello4.o con la biblioteca estandar y generar el ejecutable

Paso 11) Corregir en hello5.c y generar el ejecutable.

Paso 12) Ejecutar y analizar el resultado.

Paso 13) Corregir en hello6.c y empezar de nuevo.
 
Paso 14) hello7.c

Paso 15) Exlpicar porque funciona.







